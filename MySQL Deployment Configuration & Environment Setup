# Alumni Management System MySQL Deployment Guide

# ==================== PACKAGE.JSON ====================
cat > package.json << 'EOF'
{
  "name": "alumni-management-mysql-api",
  "version": "1.0.0",
  "description": "Alumni Management System API with MySQL",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",
    "db:setup": "node scripts/setup-database.js",
    "db:seed": "node scripts/seed-data.js"
  },
  "dependencies": {
    "express": "^4.18.2",
    "bcryptjs": "^2.4.3",
    "jsonwebtoken": "^9.0.0",
    "mysql2": "^3.6.0",
    "cors": "^2.8.5",
    "helmet": "^6.1.5",
    "express-rate-limit": "^6.7.0",
    "dotenv": "^16.0.3",
    "uuid": "^9.0.0"
  },
  "devDependencies": {
    "nodemon": "^2.0.22"
  },
  "engines": {
    "node": ">=16.0.0"
  }
}
EOF

# ==================== ENVIRONMENT VARIABLES ====================
cat > .env << 'EOF'
# MySQL Database Configuration
DB_HOST=localhost
DB_USER=root
DB_PASSWORD=your_mysql_password
DB_NAME=alumni_management
DB_PORT=3306

# For cloud databases (like PlanetScale, Railway, etc.)
# DATABASE_URL=mysql://user:password@host:port/database

# JWT Configuration
JWT_SECRET=your-super-secret-jwt-key-here-make-it-long-and-complex-at-least-32-chars

# Server Configuration
PORT=5000
NODE_ENV=development

# Frontend Configuration
FRONTEND_URL=http://localhost:3000

# Email Configuration (optional)
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=your-email@gmail.com
SMTP_PASS=your-app-password

# File Upload (optional)
MAX_FILE_SIZE=10mb
UPLOAD_PATH=./uploads
EOF

# ==================== VERCEL CONFIGURATION ====================
cat > vercel.json << 'EOF'
{
  "version": 2,
  "builds": [
    {
      "src": "server.js",
      "use": "@vercel/node"
    }
  ],
  "routes": [
    {
      "src": "/(.*)",
      "dest": "server.js"
    }
  ],
  "env": {
    "NODE_ENV": "production"
  },
  "functions": {
    "server.js": {
      "maxDuration": 30
    }
  }
}
EOF

# ==================== DATABASE SETUP SCRIPT ====================
mkdir -p scripts
cat > scripts/setup-database.js << 'EOF'
const mysql = require('mysql2/promise');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

async function setupDatabase() {
    let connection;
    
    try {
        console.log('🔄 Connecting to MySQL...');
        
        // Connect without database first to create it
        connection = await mysql.createConnection({
            host: process.env.DB_HOST || 'localhost',
            user: process.env.DB_USER || 'root',
            password: process.env.DB_PASSWORD || '',
            port: process.env.DB_PORT || 3306,
            multipleStatements: true
        });

        console.log('✅ Connected to MySQL server');
        
        // Read and execute the schema
        const schema = fs.readFileSync(path.join(__dirname, '../schema.sql'), 'utf8');
        await connection.execute(schema);
        
        console.log('✅ Database schema created successfully!');
        
        // Create default admin user
        const bcrypt = require('bcryptjs');
        const { v4: uuidv4 } = require('uuid');
        
        const hashedPassword = await bcrypt.hash('admin123', 12);
        const adminId = uuidv4();
        
        await connection.execute(`
            USE alumni_management;
            INSERT INTO users (id, email, password_hash, role) 
            VALUES (?, 'admin@alumni.edu', ?, 'admin') 
            ON DUPLICATE KEY UPDATE password_hash = VALUES(password_hash);
        `, [adminId, hashedPassword]);
        
        console.log('✅ Default admin user created/updated');
        console.log('📧 Email: admin@alumni.edu');
        console.log('🔑 Password: admin123');
        console.log('⚠️  Please change the default password after first login!');
        
        // Create sample profile for admin
        await connection.execute(`
            INSERT INTO alumni_profiles (
                id, user_id, alumni_id, first_name, last_name, batch_year,
                current_job_title, current_company, industry, bio
            ) VALUES (?, ?, 'ADMIN001', 'System', 'Administrator', 2020,
                'System Administrator', 'Alumni Association', 'Education',
                'Default administrator account for the alumni management system.'
            ) ON DUPLICATE KEY UPDATE
                first_name = VALUES(first_name),
                last_name = VALUES(last_name);
        `, [uuidv4(), adminId]);
        
        console.log('✅ Admin profile created');
        console.log('🎉 Database setup completed successfully!');
        
    } catch (error) {
        console.error('❌ Database setup failed:', error.message);
        if (error.code === 'ER_ACCESS_DENIED_ERROR') {
            console.log('💡 Check your MySQL credentials in .env file');
        } else if (error.code === 'ECONNREFUSED') {
            console.log('💡 Make sure MySQL server is running');
        }
    } finally {
        if (connection) {
            await connection.end();
        }
    }
}

setupDatabase();
EOF

# ==================== SAMPLE DATA SEEDING SCRIPT ====================
cat > scripts/seed-data.js << 'EOF'
const mysql = require('mysql2/promise');
const { v4: uuidv4 } = require('uuid');
require('dotenv').config();

async function seedData() {
    const connection = await mysql.createConnection({
        host: process.env.DB_HOST || 'localhost',
        user: process.env.DB_USER || 'root',
        password: process.env.DB_PASSWORD || '',
        database: process.env.DB_NAME || 'alumni_management',
        port: process.env.DB_PORT || 3306
    });

    try {
        console.log('🌱 Seeding sample data...');

        // Sample users and profiles
        const sampleUsers = [
            {
                id: uuidv4(),
                email: 'john.doe@example.com',
                firstName: 'John',
                lastName: 'Doe',
                batchYear: 2018,
                jobTitle: 'Software Engineer',
                company: 'Google',
                industry: 'Technology'
            },
            {
                id: uuidv4(),
                email: 'jane.smith@example.com',
                firstName: 'Jane',
                lastName: 'Smith',
                batchYear: 2019,
                jobTitle: 'Product Manager',
                company: 'Microsoft',
                industry: 'Technology'
            },
            {
                id: uuidv4(),
                email: 'mike.wilson@example.com',
                firstName: 'Mike',
                lastName: 'Wilson',
                batchYear: 2017,
                jobTitle: 'Investment Banker',
                company: 'Goldman Sachs',
                industry: 'Finance'
            }
        ];

        const bcrypt = require('bcryptjs');
        const hashedPassword = await bcrypt.hash('password123', 12);

        for (const user of sampleUsers) {
            // Insert user
            await connection.execute(
                'INSERT INTO users (id, email, password_hash, role) VALUES (?, ?, ?, ?)',
                [user.id, user.email, hashedPassword, 'alumni']
            );

            // Insert profile
            await connection.execute(
                `INSERT INTO alumni_profiles (
                    id, user_id, alumni_id, first_name, last_name, batch_year,
                    current_job_title, current_company, industry, is_mentor_available
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
                [
                    uuidv4(), user.id, `ALU${user.batchYear}${Math.random().toString(36).substr(2, 3).toUpperCase()}`,
                    user.firstName, user.lastName, user.batchYear,
                    user.jobTitle, user.company, user.industry, true
                ]
            );
        }

        console.log('✅ Sample users and profiles created');

        // Sample notifications
        const notifications = [
            {
                title: 'Welcome to Alumni Portal',
                message: 'Complete your profile to get started!',
                type: 'profile'
            },
            {
                title: 'Upcoming Event',
                message: 'Annual Alumni Reunion is coming soon. Register now!',
                type: 'event'
            }
        ];

        for (const user of sampleUsers) {
            for (const notif of notifications) {
                await connection.execute(
                    'INSERT INTO notifications (id, user_id, title, message, notification_type) VALUES (?, ?, ?, ?, ?)',
                    [uuidv4(), user.id, notif.title, notif.message, notif.type]
                );
            }
        }

        console.log('✅ Sample notifications created');

        // Award some badges
        const [badges] = await connection.execute('SELECT * FROM badges LIMIT 3');
        
        for (const user of sampleUsers) {
            for (const badge of badges) {
                await connection.execute(
                    'INSERT INTO user_badges (id, user_id, badge_id) VALUES (?, ?, ?)',
                    [uuidv4(), user.id, badge.id]
                );
            }
        }

        console.log('✅ Sample badges awarded');
        console.log('🎉 Sample data seeded successfully!');
        console.log('');
        console.log('Sample user credentials:');
        sampleUsers.forEach(user => {
            console.log(`📧 ${user.email} | 🔑 password123`);
        });

    } catch (error) {
        console.error('❌ Seeding failed:', error);
    } finally {
        await connection.end();
    }
}

seedData();
EOF

# ==================== DOCKER CONFIGURATION ====================
cat > docker-compose.yml << 'EOF'
version: '3.8'

services:
  mysql:
    image: mysql:8.0
    container_name: alumni_mysql
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: alumni_management
      MYSQL_USER: alumni_user
      MYSQL_PASSWORD: alumni_password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./schema.sql:/docker-entrypoint-initdb.d/schema.sql
    restart: unless-stopped

  api:
    build: .
    container_name: alumni_api
    environment:
      DB_HOST: mysql
      DB_USER: alumni_user
      DB_PASSWORD: alumni_password
      DB_NAME: alumni_management
      JWT_SECRET: your-jwt-secret-key-here
      NODE_ENV: development
    ports:
      - "5000:5000"
    depends_on:
      - mysql
    restart: unless-stopped
    volumes:
      - .:/app
      - /app/node_modules

volumes:
  mysql_data:
EOF

cat > Dockerfile << 'EOF'
FROM node:18-alpine

WORKDIR /app

COPY package*.json ./
RUN npm ci --only=production

COPY . .

EXPOSE 5000

CMD ["npm", "start"]
EOF

# ==================== DEPLOYMENT INSTRUCTIONS ====================
echo "==================== MYSQL DEPLOYMENT GUIDE ===================="
echo ""
echo "🗄️ DATABASE OPTIONS:"
echo ""
echo "1. LOCAL MYSQL:"
echo "   - Install MySQL 8.0+"
echo "   - Update .env with your credentials"
echo "   - Run: npm run db:setup"
echo ""
echo "2. CLOUD MYSQL SERVICES:"
echo "   📡 PlanetScale (Recommended for Vercel):"
echo "   - Sign up at planetscale.com"
echo "   - Create database and get connection string"
echo "   - Set DATABASE_URL in environment"
echo ""
echo "   📡 Railway:"
echo "   - Sign up at railway.app"
echo "   - Deploy MySQL service"
echo "   - Get connection details"
echo ""
echo "   📡 AWS RDS / Google Cloud SQL:"
echo "   - Create MySQL instance"
echo "   - Configure security groups"
echo "   - Get connection string"
echo ""
echo "3. DOCKER (Development):"
echo "   - Run: docker-compose up -d"
echo "   - Access MySQL on localhost:3306"
echo ""
echo "🚀 LOCAL DEVELOPMENT:"
echo "   npm install"
echo "   npm run db:setup"
echo "   npm run db:seed  # Optional: Add sample data"
echo "   npm run dev"
echo ""
echo "☁️ VERCEL DEPLOYMENT:"
echo "   1. Set up cloud MySQL database"
echo "   2. Install Vercel CLI: npm i -g vercel"
echo "   3. Run: vercel"
echo "   4. Add environment variables in Vercel dashboard:"
echo "      - DB_HOST, DB_USER, DB_PASSWORD, DB_NAME"
echo "      - JWT_SECRET"
echo "      - FRONTEND_URL"
echo "   5. Deploy: vercel --prod"
echo ""
echo "🔧 ENVIRONMENT VARIABLES REQUIRED:"
echo "   - DB_HOST (MySQL host)"
echo "   - DB_USER (MySQL username)"
echo "   - DB_PASSWORD (MySQL password)"
echo "   - DB_NAME (Database name)"
echo "   - JWT_SECRET (32+ character secret)"
echo "   - FRONTEND_URL (Your V0 app URL)"
echo ""
echo "📊 API ENDPOINTS:"
echo "   POST /api/auth/register - Register user"
echo "   POST /api/auth/login - User login"
echo "   GET  /api/profile - Get user profile"
echo "   POST /api/profile - Update profile"
echo "   GET  /api/events - List events"
echo "   POST /api/events/:id/register - Register for event"
echo "   GET  /api/mentors - Find mentors"
echo "   POST /api/mentorship/request - Request mentorship"
echo "   GET  /api/donations - Get donations"
echo "   POST /api/donations - Make donation"
echo "   GET  /api/dashboard - Dashboard data"
echo "   GET  /api/badges - User badges"
echo "   GET  /api/leaderboard - Community leaderboard"
echo "   GET  /api/health - Health check"
echo ""
echo "🔐 SECURITY FEATURES:"
echo "   ✅ JWT Authentication"
echo "   ✅ Password hashing (bcrypt)"
echo "   ✅ Rate limiting"
echo "   ✅ CORS protection"
echo "   ✅ SQL injection prevention"
echo "   ✅ Input validation"
echo ""
echo "🎮 GAMIFICATION FEATURES:"
echo "   ✅ Auto-badge awarding via MySQL triggers"
echo "   ✅ Points system"
echo "   ✅ Leaderboard"
echo "   ✅ Activity tracking"
echo ""
echo "🧪 TESTING:"
echo "   curl http://localhost:5000/api/health"
echo "   # Should return: {\"status\":\"OK\"}"
echo ""
echo "📝 DEFAULT CREDENTIALS:"
echo "   Email: admin@alumni.edu"
echo "   Password: admin123"
echo "   Role: admin"
echo ""
echo "⚠️ PRODUCTION CHECKLIST:"
echo "   □ Change default admin password"
echo "   □ Use strong JWT_SECRET (32+ chars)"
echo "   □ Enable SSL/HTTPS"
echo "   □ Set up backup strategy"
echo "   □ Configure monitoring"
echo "   □ Set up error logging"
echo "   □ Review rate limits"
echo "   □ Update CORS origins"
echo ""
echo "🆘 TROUBLESHOOTING:"
echo "   - Connection refused: Check MySQL is running"
echo "   - Access denied: Verify credentials in .env"
echo "   - Table doesn't exist: Run npm run db:setup"
echo "   - CORS error: Update FRONTEND_URL"
echo ""
